

name: Production CI/CD


env:
  REPOSITORY: git@github.com:${{github.repository}}.git
  PROJECT_NAME : ${{ github.event.repository.name }}
  WORK_DIR : /home/backend
  DOCKER_HUB_URL : docker.io


on:
  push:
    branches: [ master ]


jobs:
  Clone:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Clean up existing directory if it exists
            if [ -d "${{env.WORK_DIR}}/${{env.PROJECT_NAME}}" ]; then
              echo "Directory exists, removing it..."
              rm -rf ${{env.WORK_DIR}}/${{env.PROJECT_NAME}}
            fi
            
            # Clone the repository afresh
            mkdir -p ${{env.WORK_DIR}}
            cd ${{env.WORK_DIR}}
            git clone ${{env.REPOSITORY}}
            
            # Change to the project directory
            cd ${{env.PROJECT_NAME}}
            
            # Ensure we're on the latest master branch
            git checkout master
            git pull origin master
            
            # Check status after pulling
            git status
    

  Build:
    needs: Clone
    runs-on: ubuntu-latest
    steps:
    - name: Build
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        env: EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, SECRET_KEY
        script: |
          cd ${{env.WORK_DIR}}/${{env.PROJECT_NAME}}
          
          echo " ------------- docker webserver backend image -------------"
          docker compose -f docker-compose.webserver.yml build --pull 
          
          echo " ------------- docker build backend image -------------"
          docker compose build --pull 

  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        env: EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, SECRET_KEY
        script: |
          cd ${{env.WORK_DIR}}/${{env.PROJECT_NAME}}
          
          echo " ------------- docker up webserver container -------------"
          docker compose -f docker-compose.webserver.yml up -d --force-recreate --no-build

          echo " ------------- docker up backend container -------------"
          SECRET_KEY="${{ secrets.SECRET_KEY }}"  \
          EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER }}" \
          EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}" \
          SMS_API_KEY="${{ secrets.SMS_API_KEY }}" \
          docker compose up -d --force-recreate --no-build
    
          echo "------------- docker prune old image -------------"
          docker container prune --force
          docker image prune --force
          docker volume prune --force

          echo "------------- docker restart -------------"
          docker restart $(docker ps -q)
        
